import re
import requests
import logging
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

logger = logging.getLogger(__name__)

API_KEY = "AIzaSyB-KSP6j0I5MGX-Q1DcLsYUM7JNuu2YA4I"

class ActionReadLawSection(Action):
    def name(self) -> Text:
        return "action_read_law_section"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_message = tracker.latest_message.get('text', '')

        print(f"\n{'=' * 60}")
        print(f"[NEW CODE] User message: '{user_message}'")
        print(f"{'=' * 60}")

        numbers = re.findall(r'\d+', user_message)
        if not numbers:
            dispatcher.utter_message(text="B·∫°n vui l√≤ng cho bi·∫øt r√µ s·ªë ƒëi·ªÅu b·∫°n mu·ªën tra c·ª©u nh√©.")
            return []

        dieu = numbers[0]

        def normalize_text(text):
            replacements = {
                '√°': 'a', '√†': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
                'ƒÉ': 'a', '·∫Ø': 'a', '·∫±': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a',
                '√¢': 'a', '·∫•': 'a', '·∫ß': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
                'ƒë': 'd',
                '√©': 'e', '√®': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
                '√™': 'e', '·∫ø': 'e', '·ªÅ': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
                '√≠': 'i', '√¨': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
                '√≥': 'o', '√≤': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
                '√¥': 'o', '·ªë': 'o', '·ªì': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
                '∆°': 'o', '·ªõ': 'o', '·ªù': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
                '√∫': 'u', '√π': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
                '∆∞': 'u', '·ª©': 'u', '·ª´': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
                '√Ω': 'y', '·ª≥': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y',
            }
            text = text.lower()
            for vn, en in replacements.items():
                text = text.replace(vn, en)
            return text

        user_normalized = normalize_text(user_message)

        nghi_dinh_patterns = [r'ngh?[ie]?\s*d[ie]?nh', r'n[dƒë]\s*\d+', r'n[dƒë][-\s]?cp']
        thong_tu_patterns = [r'th[o√¥]?ng?\s*t[u∆∞]', r'tt\s*\d+', r'tt[-\s]?bca']
        luat_patterns = [r'lu[a·∫≠]?t', r'\bl\b', r'pccc', r'ph[o√≤]?ng\s*ch[a√°]y']

        is_nghi_dinh = any(re.search(p, user_normalized) for p in nghi_dinh_patterns)
        is_thong_tu = any(re.search(p, user_normalized) for p in thong_tu_patterns)
        is_luat = any(re.search(p, user_normalized) for p in luat_patterns)

        if is_nghi_dinh:
            file_path = "data/files/nghi_dinh_105_2025.txt"
            doc_name = "Ngh·ªã ƒë·ªãnh 105/2025/Nƒê-CP"
        elif is_thong_tu:
            file_path = "data/files/thong_tu_38_2025.txt"
            doc_name = "Th√¥ng t∆∞ 38/2025/TT-BCA"
        else:
            file_path = "data/files/luat_pccc_2024.txt"
            doc_name = "Lu·∫≠t Ph√≤ng ch√°y, ch·ªØa ch√°y v√† C·ª©u n·∫°n, c·ª©u h·ªô 2024"

        pattern = fr"ƒêi·ªÅu\s+{dieu}\..*?(?=ƒêi·ªÅu\s+\d+\.|$)"

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                text = f.read()

            match = re.search(pattern, text, re.DOTALL)

            if match:
                section = match.group(0).strip()
                dispatcher.utter_message(text=f"üìÑ {doc_name}\n\n{section}")
            else:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y ƒêi·ªÅu {dieu} trong {doc_name}.")
        except FileNotFoundError:
            dispatcher.utter_message(text="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file lu·∫≠t")
        except Exception as e:
            dispatcher.utter_message(text=f"‚ùå L·ªói: {e}")

        return []


class ActionCallGemini(Action):
    """Fallback action g·ªçi Gemini API"""

    def name(self) -> Text:
        return "action_call_gemini"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        user_message = tracker.latest_message.get("text", "").strip()

        if not user_message:
            dispatcher.utter_message(text="Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng?")
            return []

        if not API_KEY:
            dispatcher.utter_message(text="Kh√¥ng c√≥ kh√≥a API ƒë∆∞·ª£c c·∫•u h√¨nh.")
            return []

        try:
            response_text = self._call_gemini(user_message)
            if response_text:
                dispatcher.utter_message(text=f"{response_text}")
            else:
                dispatcher.utter_message(text="Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i kh√¥ng?")
        except Exception as e:
            logger.error(f"L·ªói khi g·ªçi Gemini API: {e}")
            dispatcher.utter_message(text="Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i kh√¥ng?")

        return []

    def _call_gemini(self, message: str) -> str:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={API_KEY}"
        payload = {
            "contents": [{"parts": [{"text": f"Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát: {message}"}]}],
            "generationConfig": {"temperature": 0.7, "maxOutputTokens": 200},
        }
        response = requests.post(url, json=payload, timeout=15)
        response.raise_for_status()
        data = response.json()
        return data.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "")
